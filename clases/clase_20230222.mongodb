// MongoDB
// INTRODUCCION A MONGODB
// Clase 2023-02-21

// Seleccionamos la base de datos a usar
use('sample_training');

//CONSULTAS
//1. Consulta básica
// db.zips.find({state:"NY"}) //En la DB actual, mostramos todos los documentos con state:"NY" que pertenecen a la coleccion zips

//limit(x): muestra a lo sumo x documentos
// db.zips.find({state:"NY"}).limit(5)

// skip(x): Se salta un número x de observaciones y me muestra a partir del x+1
//db.zips.find({state:"NY"}).skip(100).limit(1)

//2. Projections
// db.zips.find({state:"NY"}, //where
//     {_id:0, zip:1, city:1} //CAMPOS ESPECÍFICOS a consultar 0:No, 1:Si
// ).limit(5)

//sort({"field:-1"}): funcion que organiza la busqueda de manera -1: decreciente, 1: creciente
// db.zips.find({state:"NY"}, //where
//     {_id:0, pop:1, city:1} //CAMPOS ESPECÍFICOS a consultar
// ).sort({city:1})

//Otro ejemplo con projections y sort
//Projections y sort
// db.zips.find({},{state:1,pop:1,_id:0}).sort({pop:-1});

// count(): Metodo que muestra cuantos documentos tiene la coleccion
// db.zips.find().count()

// Operadores Logicos
// $and
// db.zips.find({ 
//     $and :[
//         {pop:{$gte:5000}},
//         {pop:{$lte:10000}}
//     ] 
// });
//$or
// db.zips.find({ 
//     $or :[
//         {state:"NY"},
//         {state:"NJ"}
//     ] 
// });
//$and y $or
// db.zips.find({ 
//     $and :[
//         {pop:{$gte:5000}},
//         {pop:{$lte:10000}},
//         {$or:[{state:"NY"},{state:"NJ"}] } 
//         ] 
// });
//$in
// db.zips.find({ state: { $in :["NY","NJ"] } });
//$in
// db.zips.find({ 
//     $and :[
//         {pop:{$gte:5000}},{pop:{$lte:10000}},{state:{$in:["NY","NJ"] } } 
//         ] 
// });
// db.zips.findOne({ 
//     $and :[
//         {pop:{$gte:5000}},{pop:{$lte:10000}},{state:{$in:["NY","NJ"] } } 
//         ] 
// });
//REGEX
// Una forma de hacer busquedas similares al LIKE de SQL
// db.zips.find( {city:/MISS/} ).pretty(); // CONTIENE A MISS EN ALGUNA PARTE
// db.zips.findOne( {city:/MISS/} ); //ME TRAE EL PRIMERO QUE ENCUENTRA
// db.zips.find( {city:/^CH/} ); // COMIENZA CON CH
// db.zips.find( {city:/ER$/} ); // TERMINA CON ER

//ACTUALIZACION DE REGISTROS
// use("sample_restaurants")

//actualizar un documento
// db.restaurants.updateOne(
//     {name:"Riviera Caterer"},  //WHERE
//     {$set:{cuisine:"Mexican"}} //valor a cambiar
// );

//actualizar varios documentos
// db.restaurants.updateMany(
//     {cuisine:"American"},  //WHERE
//     {$set:{cuisine:"Mexican"}} //valor a cambiar
// );

// upsert
// db.restaurants.updateMany(
//     {fee:{$exists:false}},  //Preguntamos si la tarifa existe
//     {$set:{fee:"Cheap"}}, //valor a cambiar
//     {upsert:true} // si no existe, creamos el campo con ese valor por defecto
// );

// db.restaurants.updateMany(
//     {},  //Para todos los documentos
//     {$set:{Menu:"Yes"}} //valor a cambiar
// );

// $rename: para cambiar el valor de un campo
// db.restaurants.updateMany(
//     {},  ///Para todos los documentos
//     {$rename:{cuisine:"Kitchen"}} //valor a cambiar
// );

// use("sample_training");

//Ejercicios
//1. Muestre todos los documentos en la colección de restaurantes
// db.restaurants.find();

//2. Muestre los campos restaurant_id, nombre, ciudad y cocina para todos los documentos en el restaurante de la colección
// db.restaurants.find({}, {_id:1, name:1, cuisine: 1, borough: 1, restaurant_id: 1});

// 4.	muestre los campos restaurant_id, nombre, comuna y código postal, pero excluya el campo _id para todos los documentos en la colección restaurant.
// db.restaurants.find({}, {_id:0, restaurant_id: 1, name:1, borough: 1, "address.zipcode":1});
